# bot.py ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–æ: –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±–µ–∑ –¥–∞—Ç–∏/—Ç–µ–ª–µ—Ñ–æ–Ω—É; "–í–∞—Ä—Ç—ñ—Å—Ç—å" –∑ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ; –§–æ—Ç–æ–∫–Ω–∏–≥–∞: Standard/Premium/Light –∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º; HTML parse_mode
import os
import re
import html
import math
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è / –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO)
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_TOKEN —É .env")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –æ–ø—Ü—ñ–π–Ω–æ

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")  # HTML –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
)
dp = Dispatcher(storage=MemoryStorage())

def norm(t: str) -> str:
    return (t or "").strip().lower()

# ---------- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (reply-–∫–Ω–æ–ø–∫–∏) ----------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏"), KeyboardButton(text="üìñ –§–æ—Ç–æ–∫–Ω–∏–≥–∞")],
        [KeyboardButton(text="üéÅ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç"), KeyboardButton(text="üìù –ó–∞–º–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é")],
        [KeyboardButton(text="üìÖ –í—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏"), KeyboardButton(text="‚ÑπÔ∏è FAQ")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")],
    ],
    resize_keyboard=True
)

# ---------- –°—Ç–∞—Ç–∏—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ----------
FREE_DATES = (
    "üìÖ <b>–í—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏</b>\n"
    "–ù–∞–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –¥–µ–Ω—å/–¥—ñ–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ¬´12.10¬ª –∞–±–æ ¬´12‚Äì14.10¬ª) ‚Äî —è –ø–µ—Ä–µ–≤—ñ—Ä—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —ñ –≤—ñ–¥–ø–æ–≤—ñ–º."
)

CERT_GIFT = (
    "üéÅ <b>–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç</b>\n"
    "–ó—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é –±–ª–∏–∑—å–∫–∏–º.\n"
    "–î—ñ—î 6 –º—ñ—Å—è—Ü—ñ–≤, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫—É –∑–π–æ–º–∫—É.\n"
    "–í–∞—Ä—Ç—ñ—Å—Ç—å: <b>–≤—ñ–¥ 2000 –≥—Ä–Ω</b> (–Ω–∞–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ–¥ –æ–±—Ä–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç)."
)

CONTACTS = (
    "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n"
    "Instagram: https://www.instagram.com/lena_shunkina_photo/\n"
    "–°–∞–π—Ç: https://shunkinaphoto.com\n"
    "Telegram: @shunkinaphoto\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +380509896036"
)

# ---------- FAQ (inline) ‚Äî –ø—É–Ω–∫—Ç–∏ 5,7,8,9 ----------
def faq_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –£–º–æ–≤–∏ —Ä–æ–±–æ—Ç–∏", callback_data="faq_terms")],
        [InlineKeyboardButton(text="üëó –Ø–∫ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –æ–¥—è–≥", callback_data="faq_outfit")],
        [InlineKeyboardButton(text="Ô∏èüíÑ –ó–∞—á—ñ—Å–∫–∞ / –ú–∞–∫—ñ—è–∂", callback_data="faq_style")],
        [InlineKeyboardButton(text="üìçÔ∏è –õ–æ–∫–∞—Ü—ñ—è: —Å—Ç—É–¥—ñ—è / –≤–¥–æ–º–∞ / –ø—Ä–∏—Ä–æ–¥–∞", callback_data="faq_location")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="faq_close")],
    ])

def faq_answer(code: str) -> str:
    mapping = {
        "faq_terms": (
            "üìå <b>–£–º–æ–≤–∏ —Ä–æ–±–æ—Ç–∏</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 30%\n"
            "‚Ä¢ –¢–µ—Ä–º—ñ–Ω –æ–±—Ä–æ–±–∫–∏: 5‚Äì10 –¥–Ω—ñ–≤\n"
            "‚Ä¢ –í—ñ–¥–¥–∞—á–∞: –æ–Ω–ª–∞–π–Ω-–≥–∞–ª–µ—Ä–µ—è\n"
            "‚Ä¢ –î—Ä—É–∫ / —Ñ–æ—Ç–æ–∫–Ω–∏–≥–∞ ‚Äî –∑–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é"
        ),
        "faq_outfit": (
            "üëó <b>–Ø–∫ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –æ–¥—è–≥</b>\n"
            "‚Ä¢ –ì–∞—Ä–º–æ–Ω—ñ–π–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –±–µ–∑ –≤–µ–ª–∏–∫–∏—Ö –ª–æ–≥–æ—Ç–∏–ø—ñ–≤\n"
            "‚Ä¢ 2‚Äì3 –∫–æ–º–ø–ª–µ–∫—Ç–∏ –Ω–∞ –≤–∏–±—ñ—Ä\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–∞–≥–∞ –æ–¥–Ω–æ—Ç–æ–Ω–Ω–∏—Ö/–ø–∞—Å—Ç–µ–ª—å–Ω–∏—Ö —Ç–æ–Ω—ñ–≤\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç—Ä–æ–∫–∞—Ç–∏—Ö –ø—Ä–∏–Ω—Ç—ñ–≤"
        ),
        "faq_style": (
            "üíÑ <b>–ó–∞—á—ñ—Å–∫–∞ / –ú–∞–∫—ñ—è–∂</b>\n"
            "‚Ä¢ –õ–µ–≥–∫–∞ —É–∫–ª–∞–¥–∫–∞ / –∞–∫—É—Ä–∞—Ç–Ω–∞ –∑–∞—á—ñ—Å–∫–∞\n"
            "‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω–∏–π –º–∞–∫—ñ—è–∂, —â–æ –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î —Ä–∏—Å–∏\n"
            "‚Ä¢ –î–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤ ‚Äî –æ—Ö–∞–π–Ω–∞ —Å—Ç—Ä–∏–∂–∫–∞, –¥–æ–≥–ª—è–Ω—É—Ç–∞ –±–æ—Ä–æ–¥–∞"
        ),
        "faq_location": (
            "üìç <b>–Ø–∫—É –ª–æ–∫–∞—Ü—ñ—é –∫—Ä–∞—â–µ –æ–±—Ä–∞—Ç–∏?</b>\n"
            "‚Ä¢ <b>–§–æ—Ç–æ—Å—Ç—É–¥—ñ—è</b> ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–µ —Å–≤—ñ—Ç–ª–æ, —á–∏—Å—Ç—ñ —Ñ–æ–Ω–∏\n"
            "‚Ä¢ <b>–í–¥–æ–º–∞</b> ‚Äî –∑–∞—Ç–∏—à–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –æ—Å–æ–±–ª–∏–≤–æ –¥–ª—è —Å—ñ–º–µ–π\n"
            "‚Ä¢ <b>–ü—Ä–∏—Ä–æ–¥–∞</b> ‚Äî –ø–∞—Ä–∫–∏, –≤—É–ª–∏—Ü—ñ, –∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è"
        ),
    }
    return mapping.get(code, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è üôÇ")

@dp.message(F.text == "‚ÑπÔ∏è FAQ")
async def open_faq(message: Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç:", reply_markup=faq_menu())

@dp.callback_query(F.data.startswith("faq_"))
async def cb_faq(call: CallbackQuery):
    code = call.data
    if code == "faq_close":
        await call.message.edit_text("–ó–∞–∫—Ä–∏—Ç–æ. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá")
        await call.message.answer("–û–±–∏—Ä–∞–π—Ç–µ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá", reply_markup=main_kb)
        await call.answer()
        return
    await call.message.edit_text(faq_answer(code), reply_markup=faq_menu())
    await call.answer()

# ---------- –ö–ê–°–ö–ê–î ‚Äú–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏‚Äù: –ú—ñ—Å—Ç–æ ‚Üí –¢–∏–ø ‚Üí (–ü–∞–∫–µ—Ç/–û–¥—Ä–∞–∑—É –¥–ª—è –ö–∏—ó–≤/–°—ñ–º–µ–π–Ω–∞) ----------
# –ú–∞—Ä–∫—É–≤–∞–Ω–Ω—è callback_data: p:<city> | p:<city>:<cat> | p:<city>:<cat>:<pkg>
# city: kyiv | krdn  (–ö—Ä–∏–≤–∏–π –†—ñ–≥/–î–Ω—ñ–ø—Ä–æ)
# cat: family | indiv
# pkg: exp | std | all

def price_city_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∏—ó–≤", callback_data="p:kyiv")],
        [InlineKeyboardButton(text="–ö—Ä–∏–≤–∏–π –†—ñ–≥ / –î–Ω—ñ–ø—Ä–æ", callback_data="p:krdn")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="p:close")],
    ])

def price_category_menu(city_key: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—ñ–º–µ–π–Ω–∞ / –í–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å", callback_data=f"p:{city_key}:family")],
        [InlineKeyboardButton(text="–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞", callback_data=f"p:{city_key}:indiv")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º—ñ—Å—Ç", callback_data="p:back_cities")],
    ])

def portfolio_row_for(cat_key: str) -> list:
    if cat_key == "family":
        return [
            InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: –°—ñ–º–µ–π–Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—è", url="https://shunkinaphoto.com/semja"),
            InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: –í–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å", url="https://shunkinaphoto.com/beremennost"),
        ]
    else:
        return [InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—è ", url="https://shunkinaphoto.com/fotosessii")]

def price_packages_menu(city_key: str, cat_key: str) -> InlineKeyboardMarkup:
    # –Ø–∫—â–æ –ö–∏—ó–≤ + –°—ñ–º–µ–π–Ω–∞ ‚Äî –ø–∞–∫–µ—Ç–∞ –ª–∏—à–µ –æ–¥–∏–Ω ‚Üí –ø–æ–∫–∞–∂–µ–º–æ –æ–¥—Ä–∞–∑—É —Ç–µ–∫—Å—Ç (–º–µ–Ω—é –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ)
    btns = []
    if not (city_key == "kyiv" and cat_key == "family"):
        if cat_key == "family":
            btns.append([InlineKeyboardButton(text="–ü–∞–∫–µ—Ç ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª", callback_data=f"p:{city_key}:{cat_key}:std")])
        else:
            btns.append([InlineKeyboardButton(text="–ü–∞–∫–µ—Ç ¬´–ï–∫—Å–ø—Ä–µ—Å-—Ñ–æ—Ç–æ—Å–µ—Å—ñ—è¬ª", callback_data=f"p:{city_key}:{cat_key}:exp")])
            btns.append([InlineKeyboardButton(text="–ü–∞–∫–µ—Ç ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª", callback_data=f"p:{city_key}:{cat_key}:std")])
            btns.append([InlineKeyboardButton(text="–ü–∞–∫–µ—Ç ¬´–í—Å–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ¬ª", callback_data=f"p:{city_key}:{cat_key}:all")])
    # –î–æ–¥–∞–º–æ —Ä—è–¥–æ–∫ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
    btns.append(portfolio_row_for(cat_key))
    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    btns.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ç–∏–ø—ñ–≤", callback_data=f"p:{city_key}:back_cats")])
    btns.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º—ñ—Å—Ç", callback_data="p:back_cities")])
    return InlineKeyboardMarkup(inline_keyboard=btns)

def price_text(city_key: str, cat_key: str, pkg_key: str) -> str:
    city_label = "–ö–∏—ó–≤" if city_key == "kyiv" else "–ö—Ä–∏–≤–∏–π –†—ñ–≥ / –î–Ω—ñ–ø—Ä–æ"

    # –°—ñ–º–µ–π–Ω–∞ (–ö–∏—ó–≤ ‚Äî —Ç—ñ–ª—å–∫–∏ ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª; –ö–†/–î–Ω—ñ–ø—Ä–æ ‚Äî ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª —ñ–Ω—à–∞ —Ü—ñ–Ω–∞)
    if cat_key == "family":
        if city_key == "kyiv":
            return (
                f"üë®‚Äçüë©‚Äçüëß <b>–°—ñ–º–µ–π–Ω–∞/–≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å ‚Äî {city_label}</b>\n"
                "<b>–ü–∞–∫–µ—Ç ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª ‚Äî 10 000 –≥—Ä–Ω</b>\n\n"
                "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—î—é, –¥–æ–ø–æ–º–æ–≥–∞ –∑ —ñ–¥–µ—è–º–∏, –ø—ñ–¥–±–æ—Ä–æ–º –æ–¥—è–≥—É —Ç–∞ –ª–æ–∫–∞—Ü—ñ–π\n"
                "‚Ä¢ 1,5‚Äì2 –≥–æ–¥–∏–Ω–∏ –∑–π–æ–º–∫–∏\n"
                "‚Ä¢ –ë–ª–∏–∑—å–∫–æ 20 —Ñ–æ—Ç–æ –≤ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ–π –æ–±—Ä–æ–±—Ü—ñ —Ç–∞ —Ä–µ—Ç—É—à—ñ\n"
                "‚Ä¢ –£—Å—ñ –≤–¥–∞–ª—ñ —Ñ–æ—Ç–æ –≤ –±–∞–∑–æ–≤—ñ–π –æ–±—Ä–æ–±—Ü—ñ (–±–ª–∏–∑—å–∫–æ 90 —à—Ç.)\n"
                "‚Ä¢ –ó–Ω–∏–∂–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–∫–Ω–∏–≥—É 10%"
            )
        else:
            return (
                f"üë®‚Äçüë©‚Äçüëß <b>–°—ñ–º–µ–π–Ω–∞/–≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å ‚Äî {city_label}</b>\n"
                "<b>–ü–∞–∫–µ—Ç ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª ‚Äî 7 000 –≥—Ä–Ω</b>\n\n"
                "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—î—é, –¥–æ–ø–æ–º–æ–≥–∞ –∑ —ñ–¥–µ—è–º–∏, –ø—ñ–¥–±–æ—Ä–æ–º –æ–¥—è–≥—É —Ç–∞ –ª–æ–∫–∞—Ü—ñ–π\n"
                "‚Ä¢ 1,5‚Äì2 –≥–æ–¥–∏–Ω–∏ –∑–π–æ–º–∫–∏\n"
                "‚Ä¢ –ë–ª–∏–∑—å–∫–æ 20 —Ñ–æ—Ç–æ –≤ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ–π –æ–±—Ä–æ–±—Ü—ñ —Ç–∞ —Ä–µ—Ç—É—à—ñ\n"
                "‚Ä¢ –£—Å—ñ –≤–¥–∞–ª—ñ —Ñ–æ—Ç–æ –≤ –±–∞–∑–æ–≤—ñ–π –æ–±—Ä–æ–±—Ü—ñ (–±–ª–∏–∑—å–∫–æ 90 —à—Ç.)\n"
                "‚Ä¢ –ó–Ω–∏–∂–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–∫–Ω–∏–≥—É 10%"
            )

    # –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞
    if pkg_key == "exp":
        price = "7 000 –≥—Ä–Ω" if city_key == "kyiv" else "6 000 –≥—Ä–Ω"
        return (
            f"üßë <b>–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ ‚Äî {city_label}</b>\n"
            f"<b>–ü–∞–∫–µ—Ç ¬´–ï–∫—Å–ø—Ä–µ—Å-—Ñ–æ—Ç–æ—Å–µ—Å—ñ—è¬ª ‚Äî {price}</b>\n\n"
            "–§–æ—Ä–º–∞—Ç –ª–∞–∫–æ–Ω—ñ—á–Ω–æ—ó –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ—ó —Å—Ç—É–¥—ñ–π–Ω–æ—ó —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó\n"
            "‚Ä¢ –û—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥—ñ—ó\n"
            "‚Ä¢ 1 –≥–æ–¥–∏–Ω–∞ –∑–π–æ–º–∫–∏\n"
            "‚Ä¢ –ë–ª–∏–∑—å–∫–æ 10 —Ñ–æ—Ç–æ –≤ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ–π –æ–±—Ä–æ–±—Ü—ñ"
        )
    if pkg_key == "std":
        price = "10 000 –≥—Ä–Ω" if city_key == "kyiv" else "7 000 –≥—Ä–Ω"
        return (
            f"üßë <b>–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ ‚Äî {city_label}</b>\n"
            f"<b>–ü–∞–∫–µ—Ç ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª ‚Äî {price}</b>\n\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—î—é: –¥–æ–ø–æ–º–æ–≥–∞ —ñ–∑ —ñ–¥–µ—è–º–∏, –ø—ñ–¥–±–æ—Ä–æ–º –æ–¥—è–≥—É —Ç–∞ –ª–æ–∫–∞—Ü—ñ–π\n"
            "‚Ä¢ 1,5‚Äì2 –≥–æ–¥–∏–Ω–∏ –∑–π–æ–º–∫–∏\n"
            "‚Ä¢ –ë–ª–∏–∑—å–∫–æ 15 —Ñ–æ—Ç–æ –≤ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ–π –æ–±—Ä–æ–±—Ü—ñ\n"
            "‚Ä¢ –£—Å—ñ –≤–¥–∞–ª—ñ —Ñ–æ—Ç–æ –≤ –±–∞–∑–æ–≤—ñ–π –æ–±—Ä–æ–±—Ü—ñ (–±–ª–∏–∑—å–∫–æ 80 —à—Ç.)\n"
            "‚Ä¢ –ó–Ω–∏–∂–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–∫–Ω–∏–≥—É 10%"
        )
    if pkg_key == "all":
        price = "26 000 –≥—Ä–Ω" if city_key == "kyiv" else "18 000 –≥—Ä–Ω"
        return (
            f"üßë <b>–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ ‚Äî {city_label}</b>\n"
            f"<b>–ü–∞–∫–µ—Ç ¬´–í—Å–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ¬ª ‚Äî {price}</b>\n\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—î—é\n"
            "‚Ä¢ 2 –≥–æ–¥–∏–Ω–∏ –∑–π–æ–º–∫–∏\n"
            "‚Ä¢ –û—Ä–µ–Ω–¥–∞ —Ñ–æ—Ç–æ—Å—Ç—É–¥—ñ—ó\n"
            "‚Ä¢ –†–æ–±–æ—Ç–∞ –≤—ñ–∑–∞–∂–∏—Å—Ç–∞ —Ç–∞ –ø–µ—Ä—É–∫–∞—Ä—è\n"
            "‚Ä¢ –†–æ–±–æ—Ç–∞ —Å—Ç–∏–ª—ñ—Å—Ç–∞ (2 —Ä—ñ–∑–Ω–∏—Ö –æ–±—Ä–∞–∑–∏)\n"
            "‚Ä¢ –ë–ª–∏–∑—å–∫–æ 20 —Ñ–æ—Ç–æ –≤ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ–π –æ–±—Ä–æ–±—Ü—ñ\n"
            "‚Ä¢ –£—Å—ñ –≤–¥–∞–ª—ñ —Ñ–æ—Ç–æ –≤ –±–∞–∑–æ–≤—ñ–π –æ–±—Ä–æ–±—Ü—ñ (–±–ª–∏–∑—å–∫–æ 90 —à—Ç.)\n\n"
            "–û–±–∏—Ä–∞—é—á–∏ —Ü–µ–π –ø–∞–∫–µ—Ç, –í–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—É—Ä–±—É–≤–∞—Ç–∏—Å—è –Ω—ñ –ø—Ä–æ —â–æ: —Å—Ç—É–¥—ñ—é –ø—ñ–¥–±–∏—Ä–∞—é—Ç—å —ñ –±—Ä–æ–Ω—é—é—Ç—å. "
            "–í—ñ–∑–∞–∂–∏—Å—Ç/–ø–µ—Ä—É–∫–∞—Ä –ø—Ä–∏—ó–∂–¥–∂–∞—î –¥–æ –í–∞—Å –∞–±–æ –≤ —Å—Ç—É–¥—ñ—é —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –æ–±—Ä–∞–∑. "
            "–°—Ç–∏–ª—ñ—Å—Ç –ø—ñ–¥–±–∏—Ä–∞—î —Ç–∞ –ø—Ä–∏–≤–æ–∑–∏—Ç—å –æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏, —Å—É–ø—Ä–æ–≤–æ–¥–∂—É—é—á–∏ –Ω–∞ –∑–π–æ–º—Ü—ñ. "
            "–Ü –í–∏ ‚Äî —É –¥–±–∞–π–ª–∏–≤–æ–º—É –æ—Ç–æ—á–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤, —è–∫—ñ –¥—É–º–∞—é—Ç—å –∑–∞ –í–∞—Å."
        )
    return "–û–ø–∏—Å –ø–∞–∫–µ—Ç–∞ –≤ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ üôÇ"

@dp.message(F.text == "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏")
async def price_flow_start(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=price_city_menu())

@dp.callback_query(F.data == "p:close")
async def price_close(call: CallbackQuery):
    await call.message.edit_text("–ó–∞–∫—Ä–∏—Ç–æ. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá")
    await call.message.answer("–û–±–∏—Ä–∞–π—Ç–µ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá", reply_markup=main_kb)
    await call.answer()

@dp.callback_query(F.data.in_({"p:kyiv", "p:krdn"}))
async def price_choose_city(call: CallbackQuery):
    city_key = call.data.split(":")[1]
    await call.message.edit_text(f"–ú—ñ—Å—Ç–æ –≤–∏–±—Ä–∞–Ω–æ: <b>{'–ö–∏—ó–≤' if city_key=='kyiv' else '–ö—Ä–∏–≤–∏–π –†—ñ–≥ / –î–Ω—ñ–ø—Ä–æ'}</b>\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–π–æ–º–∫–∏:",
                                 reply_markup=price_category_menu(city_key))
    await call.answer()

@dp.callback_query(F.data == "p:back_cities")
async def price_back_cities(call: CallbackQuery):
    await call.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=price_city_menu())
    await call.answer()

@dp.callback_query(F.data.regexp(r"^p:(kyiv|krdn):(family|indiv)$"))
async def price_choose_category(call: CallbackQuery):
    m = re.match(r"^p:(kyiv|krdn):(family|indiv)$", call.data)
    if not m:
        await call.answer(); return
    city_key, cat_key = m.group(1), m.group(2)
    label_city = "–ö–∏—ó–≤" if city_key == "kyiv" else "–ö—Ä–∏–≤–∏–π –†—ñ–≥ / –î–Ω—ñ–ø—Ä–æ"
    label_cat = "–°—ñ–º–µ–π–Ω–∞ / –í–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å" if cat_key == "family" else "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞"

    # –Ø–∫—â–æ –ö–∏—ó–≤ + –°—ñ–º–µ–π–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø–∞–∫–µ—Ç –æ–¥—Ä–∞–∑—É (–±–µ–∑ —â–µ –æ–¥–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É)
    if city_key == "kyiv" and cat_key == "family":
        text = price_text(city_key, cat_key, "std")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            portfolio_row_for("family"),
            [InlineKeyboardButton(text="üìù –ó–∞–º–æ–≤–∏—Ç–∏ —Ü–µ–π –ø–∞–∫–µ—Ç", callback_data="start_booking")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ç–∏–ø—ñ–≤", callback_data=f"p:{city_key}:back_cats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º—ñ—Å—Ç", callback_data="p:back_cities")],
        ])
        await call.message.edit_text(text, reply_markup=kb)
        await call.answer()
        return

    await call.message.edit_text(
        f"–ú—ñ—Å—Ç–æ: <b>{label_city}</b>\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <b>{label_cat}</b>\n–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç:",
        reply_markup=price_packages_menu(city_key, cat_key)
    )
    await call.answer()

@dp.callback_query(F.data.regexp(r"^p:(kyiv|krdn):(family|indiv):(exp|std|all)$"))
async def price_show_package(call: CallbackQuery):
    m = re.match(r"^p:(kyiv|krdn):(family|indiv):(exp|std|all)$", call.data)
    if not m:
        await call.answer(); return
    city_key, cat_key, pkg_key = m.group(1), m.group(2), m.group(3)
    text = price_text(city_key, cat_key, pkg_key)
    order_kb = InlineKeyboardMarkup(inline_keyboard=[
        portfolio_row_for(cat_key),
        [InlineKeyboardButton(text="üìù –ó–∞–º–æ–≤–∏—Ç–∏ —Ü–µ–π –ø–∞–∫–µ—Ç", callback_data="start_booking")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–∞–∫–µ—Ç—ñ–≤", callback_data=f"p:{city_key}:{cat_key}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ç–∏–ø—ñ–≤", callback_data=f"p:{city_key}:back_cats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º—ñ—Å—Ç", callback_data="p:back_cities")],
    ])
    await call.message.edit_text(text, reply_markup=order_kb)
    await call.answer()

@dp.callback_query(F.data.regexp(r"^p:(kyiv|krdn):back_cats$"))
async def price_back_categories(call: CallbackQuery):
    m = re.match(r"^p:(kyiv|krdn):back_cats$", call.data)
    if not m:
        await call.answer(); return
    city_key = m.group(1)
    await call.message.edit_text(f"–ú—ñ—Å—Ç–æ –≤–∏–±—Ä–∞–Ω–æ: <b>{'–ö–∏—ó–≤' if city_key=='kyiv' else '–ö—Ä–∏–≤–∏–π –†—ñ–≥ / –î–Ω—ñ–ø—Ä–æ'}</b>\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–π–æ–º–∫–∏:",
                                 reply_markup=price_category_menu(city_key))
    await call.answer()

# ---------- –§–û–¢–û–ö–ù–ò–ì–ê: Standard / Premium / Light ----------
class PhotoBookFlow(StatesGroup):
    kind = State()      # standard / premium / light
    format = State()    # s_30x20, s_30x30, p_20x20, p_30x30
    photos = State()    # –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è standard/premium)

def photobook_kind_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Standard", callback_data="bk:std")],
        [InlineKeyboardButton(text="Premium", callback_data="bk:pre")],
        [InlineKeyboardButton(text="Light (4500 –≥—Ä–Ω)", callback_data="bk:light")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="bk:cancel")],
    ])

def photobook_format_menu(kind: str) -> InlineKeyboardMarkup:
    if kind == "std":
        # –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤ (UAH)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="30√ó20 —Å–º ‚Äî 1950 –≥—Ä–Ω (–∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤)", callback_data="bkf:s_30x20")],
            [InlineKeyboardButton(text="30√ó30 —Å–º ‚Äî 2300 –≥—Ä–Ω (–∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤)", callback_data="bkf:s_30x30")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bk:back")],
        ])
    if kind == "pre":
        # –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤ (USD)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="20√ó20 —Å–º ‚Äî $90 (–∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤)", callback_data="bkf:p_20x20")],
            [InlineKeyboardButton(text="30√ó30 —Å–º ‚Äî $145 (–∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤)", callback_data="bkf:p_30x30")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bk:back")],
        ])
    return InlineKeyboardMarkup(inline_keyboard=[])

# –ë–∞–∑–∞: —Ü—ñ–Ω–∏ –∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤ —ñ –º–∞–∫—Å. —Ä–æ–∑–≤–æ—Ä–æ—Ç–∏
BOOK_BASE = {
    "s_30x20": {"currency": "UAH", "base10": 1950, "title": "Standard 30√ó20 —Å–º", "max_photos": 120, "extra_rate": 0.10},
    "s_30x30": {"currency": "UAH", "base10": 2300, "title": "Standard 30√ó30 —Å–º", "max_photos": 120, "extra_rate": 0.10},
    "p_20x20": {"currency": "USD", "base10": 90,  "title": "Premium 20√ó20 —Å–º", "max_photos": 150, "extra_rate": 0.10},
    "p_30x30": {"currency": "USD", "base10": 145, "title": "Premium 30√ó30 —Å–º", "max_photos": 150, "extra_rate": 0.10},
}

STANDARD_DESC = (
    "<b>Standard</b>\n"
    "–Ü–¥–µ–∞–ª—å–Ω–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è –ø–æ–ª—ñ–≥—Ä–∞—Ñ—ñ—ó —Ç–∞ —Ñ–æ—Ç–æ–¥—Ä—É–∫—É. –°—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω—ñ –Ω–∞ —Ñ–æ—Ç–æ–ø–∞–ø–µ—Ä—ñ ‚Äî —â—ñ–ª—å–Ω—ñ, –∫—Ä–∞—Å–∏–≤—ñ, –Ω–µ –¥–µ—Ñ–æ—Ä–º—É—é—Ç—å—Å—è. "
    "–†–æ–∑–≤–æ—Ä–æ—Ç–∏ –Ω–∞ 180¬∞.\n"
    "–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ ‚Äî —Ñ–æ—Ç–æ–æ–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑ –≤–∞—à–∏–º —Ñ–æ—Ç–æ.\n"
    "–ù–∞ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—É –∫–Ω–∏–≥–∏ ‚Äî –∑–Ω–∏–∂–∫–∞ 30%.\n"
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤: 40.\n\n"
    "<u>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ</u>:\n"
    "‚Ä¢ –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑ —Ç–∫–∞–Ω–∏–Ω–∏ –∞–±–æ —à–∫—ñ—Ä–æ–∑–∞–º—ñ–Ω–Ω–∏–∫–∞ ‚Äî 1300 –≥—Ä–Ω\n"
    "‚Ä¢ –ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π –∫–æ—Ä–æ–± ‚Äî 750 –≥—Ä–Ω"
)

PREMIUM_DESC = (
    "<b>Premium</b>\n"
    "–ö–Ω–∏–≥–∏ –º–∞—é—Ç—å —Ç–∏—Ç—É–ª—å–Ω–∏–π —Ä–æ–∑–≤–æ—Ä–æ—Ç —ñ–∑ –∫–∞–ª—å–∫–æ—é, –ø–∞—Å–ø–∞—Ä—Ç—É, —Ñ–æ—Ä–∑–∞—Ü –∑ —ñ—Ç–∞–ª—ñ–π—Å—å–∫–æ–≥–æ –∞–∫–≤–∞—Ä–µ–ª—å–Ω–æ–≥–æ –∫–∞—Ä—Ç–æ–Ω—É, –¥—Ä—É–∫ –Ω–∞ —à–æ–≤–∫–æ–≤–æ–º—É –ø–∞–ø–µ—Ä—ñ. "
    "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ 180¬∞ –¥–∞—î —à–∏—Ä–æ–∫—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–∏–∑–∞–π–Ω—É.\n"
    "–ó–Ω–∏–∂–∫–∞ 30% –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç –∫–Ω–∏–≥–∏.\n"
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤: 50.\n\n"
    "<u>–í–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–±–∫–ª–∞–¥–∏–Ω–æ–∫</u>:\n"
    "‚Ä¢ –¢–∫–∞–Ω–∏–Ω–∞ (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ/–Ω–∞–ø–∏—Å–æ–º)\n"
    "‚Ä¢ –®–∫—ñ—Ä–∞ (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ/–Ω–∞–ø–∏—Å–æ–º)\n"
    "‚Ä¢ –ö–æ–∂–∑–∞–º (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ/–Ω–∞–ø–∏—Å–æ–º)\n\n"
    "<u>–î–æ–¥–∞—Ç–∫–æ–≤–æ</u>:\n"
    "‚Ä¢ –ö–æ—Ä–æ–± –¥–ª—è —Ñ–æ—Ç–æ–∫–Ω–∏–≥ —ñ–∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏—Ö –ø–∞–ª—ñ—Ç—É—Ä–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ ‚Äî 600‚Äì1000 –≥—Ä–Ω (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É)"
)

LIGHT_DESC = (
    "<b>Light ‚Äî 4500 –≥—Ä–Ω</b>\n"
    "–ß—É–¥–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ —É –≤–∞—Å –±–∞–≥–∞—Ç–æ —Ñ–æ—Ç–æ –π —Ö–æ—á–µ—Ç—å—Å—è –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ –≤—Å–µ.\n"
    "–†–æ–∑–º—ñ—Ä: 30√ó30 —Å–º. –í–º—ñ—â—É—î –¥–æ 100 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.\n"
    "–ü–æ–ª—ñ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –¥—Ä—É–∫ –Ω–∞ –≤–∏—Å–æ–∫–æ–∫–ª–∞—Å–Ω–æ–º—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ; —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ö–æ–∂—ñ –Ω–∞ –∂—É—Ä–Ω–∞–ª—å–Ω—ñ, –∞–ª–µ —â—ñ–ª—å–Ω—ñ—à—ñ.\n"
    "–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ ‚Äî —Ç–∫–∞–Ω–∏–Ω–∞ –∞–±–æ —à–∫—ñ—Ä–∑–∞–º (–Ω–∞ –≤–∏–±—ñ—Ä).\n"
    "–õ–µ–≥–∫–∞ —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–æ –≤–∏—Ä–∞–∑–Ω–∞ –∫–Ω–∏–≥–∞. –ó–Ω–∏–∂–∫–∞ 30% –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç."
)

@dp.message(F.text == "üìñ –§–æ—Ç–æ–∫–Ω–∏–≥–∞")
async def photobook_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(PhotoBookFlow.kind)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ—Ç–æ–∫–Ω–∏–≥–∏:", reply_markup=photobook_kind_menu())

@dp.callback_query(F.data == "bk:cancel")
async def bk_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ. –û–±–∏—Ä–∞–π—Ç–µ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá")
    await call.message.answer("–û–±–∏—Ä–∞–π—Ç–µ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá", reply_markup=main_kb)
    await call.answer()

@dp.callback_query(F.data == "bk:back")
async def bk_back(call: CallbackQuery, state: FSMContext):
    await state.set_state(PhotoBookFlow.kind)
    await call.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ—Ç–æ–∫–Ω–∏–≥–∏:", reply_markup=photobook_kind_menu())
    await call.answer()

@dp.callback_query(F.data.in_({"bk:std", "bk:pre", "bk:light"}))
async def bk_choose_kind(call: CallbackQuery, state: FSMContext):
    kind = call.data.split(":")[1]  # std/pre/light
    await state.update_data(kind=kind)
    if kind == "light":
        # –ë–µ–∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –æ–ø–∏—Å —ñ —Ü—ñ–Ω—É
        text = LIGHT_DESC
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bk:back")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="bk:cancel")],
        ])
        await call.message.edit_text(text, reply_markup=kb)
        await call.answer()
        return

    await state.set_state(PhotoBookFlow.format)
    await call.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç (–≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∫–∞–∑–∞–Ω–∞ –∑–∞ <b>10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤</b>):",
                                 reply_markup=photobook_format_menu(kind))
    await call.answer()

@dp.callback_query(F.data.regexp(r"^bkf:(s_30x20|s_30x30|p_20x20|p_30x30)$"))
async def bk_choose_format(call: CallbackQuery, state: FSMContext):
    m = re.match(r"^bkf:(s_30x20|s_30x30|p_20x20|p_30x30)$", call.data)
    if not m:
        await call.answer(); return
    fmt = m.group(1)
    await state.update_data(format=fmt)
    await state.set_state(PhotoBookFlow.photos)

    base = BOOK_BASE[fmt]
    cur = "–≥—Ä–Ω" if base["currency"] == "UAH" else "$"
    await call.message.edit_text(
        (
            f"–í–∏–±—Ä–∞–Ω–æ: <b>{base['title']}</b>\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤: <b>{base['base10']} {cur}</b>\n"
            f"–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑–≤–æ—Ä–æ—Ç: <b>10% –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤</b>\n"
            f"–ú–µ–∂—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–æ—Ç–æ: <b>–º—ñ–Ω. 5</b> ¬∑ <b>–º–∞–∫—Å. {base['max_photos']}</b>\n\n"
            "–•–æ—á–µ—Ç–µ, —è –ø–æ—Ä–∞—Ö—É—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –í–∞–º —Ä–æ–∑–≤–æ—Ä–æ—Ç–∏? –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ (—á–∏—Å–ª–æ–º)."
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bk:back")]
        ])
    )

@dp.message(PhotoBookFlow.photos, F.text.regexp(r"^\d{1,4}$"))
async def bk_enter_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    fmt = data.get("format")
    if not fmt or fmt not in BOOK_BASE:
        await state.clear()
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É: ¬´üìñ –§–æ—Ç–æ–∫–Ω–∏–≥–∞¬ª.")
        return

    photos = int(message.text.strip())
    base = BOOK_BASE[fmt]
    base10 = base["base10"]
    currency = base["currency"]
    max_photos = base["max_photos"]      # 120 –¥–ª—è Standard, 150 –¥–ª—è Premium
    min_photos = 5

    # --- –í–∞–ª—ñ–¥–∞—Ü—ñ—è: —è–∫—â–æ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏, –Ω–µ —Ä–∞—Ö—É—î–º–æ, –ª–∏—à–µ –ø—ñ–¥–∫–∞–∑–∫–∞ ---
    if photos < min_photos or photos > max_photos:
        await message.answer(
            (
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ –≤ –º–µ–∂–∞—Ö: "
                f"<b>{min_photos}‚Ä¶{max_photos}</b> –¥–ª—è ¬´{base['title']}¬ª.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üôÇ"
            )
        )
        # –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω PhotoBookFlow.photos, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –∑–Ω–æ–≤—É
        return

    # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ---
    spreads = math.ceil(photos / 3)                     # 1 —Ä–æ–∑–≤–æ—Ä–æ—Ç = 3 —Ñ–æ—Ç–æ
    extra_spreads = max(0, spreads - 10)                # –≤—Å–µ, —â–æ –ø–æ–Ω–∞–¥ –±–∞–∑–æ–≤—ñ 10
    extra_cost_per_spread = base10 * base["extra_rate"] # 10% –≤—ñ–¥ –±–∞–∑–∏ –∑–∞ 10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤
    total = base10 + extra_spreads * extra_cost_per_spread

    cur = "–≥—Ä–Ω" if currency == "UAH" else "$"
    detail = (
        f"üìñ <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫</b>\n"
        f"–§–æ—Ä–º–∞—Ç: {base['title']}\n"
        f"–§–æ—Ç–æ: {photos}\n"
        f"–†–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ: {spreads} (1 —Ä–æ–∑–≤–æ—Ä–æ—Ç = 3 —Ñ–æ—Ç–æ)\n"
        f"–ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ (10 —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤): {base10} {cur}\n"
        f"–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–æ–∑–≤–æ—Ä–æ—Ç–∏: {extra_spreads} √ó {extra_cost_per_spread:.0f} {cur}\n"
        f"–î–æ —Å–ø–ª–∞—Ç–∏: <b>{total:.0f} {cur}</b>\n\n"
    )

    desc = STANDARD_DESC if fmt.startswith("s_") else PREMIUM_DESC
    await state.clear()
    await message.answer(detail + desc)
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –º–µ–Ω—é üëá", reply_markup=main_kb)


@dp.message(PhotoBookFlow.photos)
async def bk_photos_invalid(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 24, 37 –∞–±–æ 90.")

# ---------- –ë–†–û–ù–Æ–í–ê–ù–ù–Ø (–±–µ–∑ –¥–∞—Ç–∏ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É) ----------
class Booking(StatesGroup):
    name = State()
    note = State()

@dp.message(F.text == "üìù –ó–∞–º–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é")
async def booking_start_btn(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Booking.name)
    await message.answer("–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è? (–Ü–º‚Äô—è)")

@dp.callback_query(F.data == "start_booking")
async def booking_start_cb(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Booking.name)
    await call.message.edit_text("–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è? (–Ü–º‚Äô—è)")
    await call.answer()

@dp.message(Booking.name, F.text)
async def booking_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(Booking.note)
    await message.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç (–º—ñ—Å—Ç–æ/—Ç–∏–ø/–ø–∞–∫–µ—Ç/–ø–æ–±–∞–∂–∞–Ω–Ω—è). –ê–±–æ ¬´‚Äì¬ª.")

@dp.message(Booking.note, F.text)
async def booking_finish(message: Message, state: FSMContext):
    await state.update_data(note=message.text.strip())
    data = await state.get_data()
    await state.clear()

    name = html.escape(data.get('name',''))
    note = html.escape(data.get('note',''))
    user = html.escape(message.from_user.username or str(message.from_user.id))

    summary = (
        "‚úÖ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–π–æ–º–∫—É</b>\n"
        f"‚Ä¢ –Ü–º'—è: {name}\n"
        f"‚Ä¢ –ö–æ–º–µ–Ω—Ç–∞—Ä: {note}\n"
        f"‚Ä¢ –í—ñ–¥: @{user}"
    )
    if ADMIN_ID > 0:
        try:
            await bot.send_message(ADMIN_ID, summary)
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É: {e}")
    await message.answer(summary)
    await message.answer("–î—è–∫—É—é! –Ø –Ω–∞ –∑–≤'—è–∑–∫—É –π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –º–µ–Ω—é üëá", reply_markup=main_kb)

# ---------- –Ü–Ω—à—ñ –≥–æ–ª–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ ----------
@dp.message(F.text == "üìÖ –í—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏")
async def free_dates(message: Message):
    await message.answer(FREE_DATES)

@dp.message(F.text == "üéÅ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç")
async def cert_gift(message: Message):
    await message.answer(CERT_GIFT)

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def contacts(message: Message):
    await message.answer(CONTACTS)

# ---------- –ó–ê–ì–ê–õ–¨–ù–ò–ô —Ä–æ—É—Ç–µ—Ä (—Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –Ω–µ–º–∞—î —Å—Ç–∞–Ω—É) ----------
@dp.message(StateFilter(None), F.text)
async def router(message: Message, state: FSMContext):
    await message.answer("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /help üôÇ", reply_markup=main_kb)

# ---------- –ö–æ–º–∞–Ω–¥–∏ ----------
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–û–±–∏—Ä–∞–π—Ç–µ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é üëá", reply_markup=main_kb)

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ ‚Äî –≥–æ–ª–æ–≤–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏ –≤–∂–µ –≥–æ—Ç–æ–≤—ñ.", reply_markup=main_kb)

@dp.message(Command("ping"))
async def ping(message: Message):
    await message.answer("pong ‚úÖ")

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    import asyncio
    print("Bot is running‚Ä¶")
    async def main():
        await dp.start_polling(bot)
    asyncio.run(main())
